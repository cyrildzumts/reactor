
#ifndef SERVICE_H
#define SERVICE_H

#include "common.h"
#include <exception>
#include <curl/curl.h>
#include <utility>
#include <type_traits>
#include <iostream>
#include <string>
#include <cstring>

#ifndef URL
    #define URL_1 "http://www.mocky.io/v2/5c404307350000b02dec3c0e/?mocky-delay=500ms" // receive 21 Bytes
    #define URL_2 "http://www.mocky.io/v2/5c405ffe0f00007408e7b3f9/?mocky-delay=500ms" // receive 52 Bytes
    #define URL_3 "http://slowwly.robertomurray.co.uk/delay/500/url/https://example.com/" //receive 1270 Bytes
    #define URL_4 "https://example.com" //receive 1270 Bytes
#endif

template<typename Callback, typename... Args>
struct typeof_t{
    using result_type = std::invoke_result_t<std::decay_t<Callback>, std::decay_t<Args>...>;
    using type = Callback(*)(Args...);
};


struct curl_callback_t {
    using result_type = size_t;
    using type = size_t(*)(char*, size_t, size_t, void*);
};

struct Datapointer{
    char *data;
    size_t size;
};

class ServiceError : public std::runtime_error{
public:
    enum Error {
        BAD_REQUEST = 1, UNAUTHORISED, SYSTEM, TOO_FAST_REQUEST
    };
    ServiceError(const char* what_args);
    ServiceError(const std::string& what_args);
    ServiceError();
    // Exception Interface
    virtual const char* what() const noexcept;

private:
    std::string what_string;

};
/**
 * @brief write_callback this method is called when libcurl receives data
 * from the remote service call.
 * @param contents the received data
 * @param size the size of  type : always = 1
 * @param nmemb the number of the received data in byte
 * @param userdata the buffer where to put the received data in.
 * @return the number of received byte until now.
 */
size_t write_callback(char *contents, size_t size, size_t nmemb, void *userdata);


/**
 * @brief job function which simulate processing by sleep for a duration
 * of delay.
 * @param req dummy arguments
 * @param delay duration for the sleep
 * @return req + delay.
 * Note : for simulation purpose, this throws a SeviceError exception
 * when delay < 0 || delay > PROCESSING_DURATION ( defined in config.h
 * this file is generated by CMake).
 */
int job(const int &req,const int &delay);
CURLcode http_job(const std::string &url);



#endif // SERVICE_H
